diff --git a/README.md b/README.md
index ea0038e..ead2f61 100644
--- a/README.md
+++ b/README.md
@@ -1,8 +1,8 @@
-# 4 - Authenticating users
+# 5 - Logging app events
 
-This folder contains the sample code for the [Authenticating users][step-4]
+This folder contains the sample code for the [Logging app events][step-5]
 tutorial. Please refer to the tutorial for instructions on configuring, running,
 and deploying this sample.
 
-[step-4]: https://cloud.google.com/php/getting-started/authenticate-users
+[step-5]: https://cloud.google.com/php/getting-started/logging-application-events
 
diff --git a/composer.json b/composer.json
index db732fa..4dcaf60 100644
--- a/composer.json
+++ b/composer.json
@@ -8,6 +8,7 @@
     "php": "5.6.*|7.0.*|7.1.*",
     "google/apiclient": "^2.0",
     "google/cloud": "^0.21",
+    "monolog/monolog": "^1.17",
     "silex/silex": "^1.3",
     "symfony/yaml": "^3.0",
     "twig/twig": "^1.22"
diff --git a/composer.lock b/composer.lock
index 38e435f..c25bf35 100644
--- a/composer.lock
+++ b/composer.lock
@@ -4,7 +4,7 @@
         "Read more about it at https://getcomposer.org/doc/01-basic-usage.md#composer-lock-the-lock-file",
         "This file is @generated automatically"
     ],
-    "content-hash": "747a138f1e78e6571c19d5d7f2db97be",
+    "content-hash": "a1c6ded1cda37463fb5abc1d91ecfcdf",
     "packages": [
         {
             "name": "firebase/php-jwt",
diff --git a/src/app.php b/src/app.php
index 40f94fb..8e49c0c 100644
--- a/src/app.php
+++ b/src/app.php
@@ -20,6 +20,7 @@
  * Create a new Silex Application with Twig.  Configure it for debugging.
  * Follows Silex Skeleton pattern.
  */
+use Google\Cloud\Logger\AppEngineFlexHandler;
 use Google\Cloud\Samples\Bookshelf\DataModel\Sql;
 use Google\Cloud\Samples\Bookshelf\DataModel\Datastore;
 use Google\Cloud\Samples\Bookshelf\DataModel\MongoDb;
@@ -62,17 +63,29 @@ $app['user'] = function ($app) {
 };
 // [END session]
 
+// add AppEngineFlexHandler on prod
+// [START logging]
+$app->register(new Silex\Provider\MonologServiceProvider());
+if (isset($_SERVER['GAE_VM']) && $_SERVER['GAE_VM'] === 'true') {
+    $app['monolog.handler'] = new AppEngineFlexHandler();
+} else {
+    $app['monolog.handler'] = new Monolog\Handler\ErrorLogHandler();
+}
+// [END logging]
+
 // create the google authorization client
 // [START google_client]
 $app['google_client'] = function ($app) {
     /** @var Symfony\Component\Routing\Generator\UrlGenerator $urlGen */
     $urlGen = $app['url_generator'];
     $redirectUri = $urlGen->generate('login_callback', [], $urlGen::ABSOLUTE_URL);
-    return new Google_Client([
+    $client = new Google_Client([
         'client_id'     => $app['config']['google_client_id'],
         'client_secret' => $app['config']['google_client_secret'],
         'redirect_uri'  => $redirectUri,
     ]);
+    $client->setLogger($app['monolog']);
+    return $client;
 };
 // [END google_client]
 
diff --git a/src/controllers.php b/src/controllers.php
index a379eb2..79a3b78 100644
--- a/src/controllers.php
+++ b/src/controllers.php
@@ -155,6 +155,11 @@ $app->post('/books/{id}/delete', function ($id) use ($app) {
             $storage->deleteFile($book['image_url']);
         }
         // [END delete_image]
+
+        // [START logging]
+        $app['monolog']->notice('Deleted Book: ' . $book['id']);
+        // [END logging]
+
         return $app->redirect('/books/', Response::HTTP_SEE_OTHER);
     }
 
@@ -166,7 +171,6 @@ $app->post('/books/{id}/delete', function ($id) use ($app) {
 $app->get('/login', function () use ($app) {
     /** @var Google_Client $client */
     $client = $app['google_client'];
-
     $scopes = [ \Google_Service_Oauth2::USERINFO_PROFILE ];
     $authUrl = $client->createAuthUrl($scopes);
 
@@ -215,3 +219,7 @@ $app->get('/logout', function () use ($app) {
     return new Response('', Response::HTTP_FOUND, ['Location' => '/']);
 })->bind('logout');
 # [END logout]
+
+$app->get('/_ah/health', function (Request $request) use ($app) {
+    return 'OK';
+});
diff --git a/test/composer-mongodb.json b/test/composer-mongodb.json
index f6656d8..fd2d873 100644
--- a/test/composer-mongodb.json
+++ b/test/composer-mongodb.json
@@ -7,6 +7,8 @@
   "require": {
     "php": "~5.5.0|~5.6.0|~7.0.0",
     "google/apiclient": "~2.0@RC",
+    "google/cloud": "^0.2",
+    "monolog/monolog": "^1.17",
     "mongodb/mongodb": "1.0.4",
     "silex/silex": "^1.3",
     "symfony/yaml": "^3.0",
diff --git a/test/functional/ControllersTest.php b/test/functional/ControllersTest.php
index 9e8ff1f..ab9a67b 100644
--- a/test/functional/ControllersTest.php
+++ b/test/functional/ControllersTest.php
@@ -332,4 +332,16 @@ class ControllersTest extends WebTestCase
 
         $this->assertNull($this->app['session']->get('user'));
     }
+
+    public function testHealthCheck()
+    {
+        $client = $this->createClient();
+        $client->followRedirects();
+        $crawler = $client->request('GET', '/_ah/health');
+
+        $response = $client->getResponse();
+
+        $this->assertEquals(200, $response->getStatusCode());
+        $this->assertEquals('OK', $response->getContent());
+    }
 }
diff --git a/test/functional/LoggerTest.php b/test/functional/LoggerTest.php
new file mode 100644
index 0000000..b00deec
--- /dev/null
+++ b/test/functional/LoggerTest.php
@@ -0,0 +1,65 @@
+<?php
+/*
+ * Copyright 2015 Google Inc. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+namespace Google\Cloud\Samples\Bookshelf;
+
+use Silex\WebTestCase;
+use Monolog\Handler\TestHandler;
+
+/**
+ * Class ControllersTest.
+ */
+class LoggerTest extends WebTestCase
+{
+    /**
+     * Creates the application.
+     *
+     * @return \Symfony\Component\HttpKernel\HttpKernelInterface
+     */
+    public function createApplication()
+    {
+        $app = require __DIR__ . '/../../src/app.php';
+        require __DIR__ . '/../../src/controllers.php';
+
+        return $app;
+    }
+
+    public function testLogger()
+    {
+        $this->assertInstanceOf('Monolog\Logger', $this->app['monolog']);
+        $this->assertInstanceOf('Monolog\Handler\ErrorLogHandler', $this->app['monolog.handler']);
+    }
+
+    public function testDeleteLogsId()
+    {
+        $model = $this->getMock('Google\Cloud\Samples\Bookshelf\DataModel\DataModelInterface');
+        $model
+            ->expects($this->once())
+            ->method('read')
+            ->will($this->returnValue(array('id' => '123', 'image_url' => null)));
+        $model
+            ->expects($this->once())
+            ->method('delete');
+
+        $this->app['bookshelf.model'] = $model;
+        $this->app['monolog.handler'] = new TestHandler;
+
+        $client = $this->createClient();
+        $crawler = $client->request('POST', '/books/123/delete');
+        $this->assertTrue($this->app['monolog.handler']->hasNotice('Deleted Book: 123'));
+    }
+}
