diff --git a/composer.json b/composer.json
index 9e58d7b..bae1f35 100644
--- a/composer.json
+++ b/composer.json
@@ -7,9 +7,10 @@
   "require": {
     "php": "~5.5.0|~5.6.0|~7.0.0",
     "google/apiclient": "~2.0@RC",
+    "monolog/monolog": "^1.17",
     "silex/silex": "^1.3",
-    "twig/twig": "^1.22",
-    "symfony/yaml": "^3.0"
+    "symfony/yaml": "^3.0",
+    "twig/twig": "^1.22"
   },
   "require-dev": {
     "behat/mink": "^1.7",
diff --git a/composer.lock b/composer.lock
index 9731c06..f967f6c 100644
--- a/composer.lock
+++ b/composer.lock
@@ -4,8 +4,8 @@
         "Read more about it at https://getcomposer.org/doc/01-basic-usage.md#composer-lock-the-lock-file",
         "This file is @generated automatically"
     ],
-    "hash": "570fd67a43fdeaa06dabfc2a3ee26710",
-    "content-hash": "432300c23b9632ed39c2d1ca30cf8de3",
+    "hash": "e4e140dc157301d0e88269b4c1830547",
+    "content-hash": "01d4cd2f439a5be040ce105e3693d125",
     "packages": [
         {
             "name": "firebase/php-jwt",
diff --git a/src/app.php b/src/app.php
index b3fe866..29928e2 100644
--- a/src/app.php
+++ b/src/app.php
@@ -58,6 +58,12 @@ $app['user'] = function ($app) {
 };
 // [END session]
 
+// add logging to stderr
+// [START logging]
+$app->register(new Silex\Provider\MonologServiceProvider());
+$app['monolog.handler'] = new Monolog\Handler\ErrorLogHandler();
+// [END logging]
+
 // create the google authorization client
 // [START google_client]
 $app['google_client'] = function ($app) {
diff --git a/src/controllers.php b/src/controllers.php
index 76c7c3c..9c317a0 100644
--- a/src/controllers.php
+++ b/src/controllers.php
@@ -158,6 +158,11 @@ $app->post('/books/{id}/delete', function ($id) use ($app) {
             $storage->deleteFile($book['imageUrl']);
         }
         // [END delete_image]
+
+        // [START logging]
+        $app['monolog']->notice('Deleted Book: ' . $book['id']);
+        // [END logging]
+
         return $app->redirect('/books/', Response::HTTP_SEE_OTHER);
     }
 
@@ -220,3 +225,6 @@ $app->get('/logout', function () use ($app) {
 })->bind('logout');
 # [END logout]
 
+$app->get('/_ah/health', function (Request $request) use ($app) {
+    return 'OK';
+});
diff --git a/test/functional/ControllersTest.php b/test/functional/ControllersTest.php
index ac6cc60..e964aeb 100644
--- a/test/functional/ControllersTest.php
+++ b/test/functional/ControllersTest.php
@@ -333,4 +333,16 @@ class ControllersTest extends WebTestCase
 
         $this->assertNull($this->app['session']->get('user'));
     }
+
+    public function testHealthCheck()
+    {
+        $client = $this->createClient();
+        $client->followRedirects();
+        $crawler = $client->request('GET', '/_ah/health');
+
+        $response = $client->getResponse();
+
+        $this->assertEquals(200, $response->getStatusCode());
+        $this->assertEquals('OK', $response->getContent());
+    }
 }
diff --git a/test/functional/LoggerTest.php b/test/functional/LoggerTest.php
new file mode 100644
index 0000000..70733d2
--- /dev/null
+++ b/test/functional/LoggerTest.php
@@ -0,0 +1,65 @@
+<?php
+/*
+ * Copyright 2015 Google Inc. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+namespace Google\Cloud\Samples\Bookshelf;
+
+use Silex\WebTestCase;
+use Monolog\Handler\TestHandler;
+
+/**
+ * Class ControllersTest.
+ */
+class LoggerTest extends WebTestCase
+{
+    /**
+     * Creates the application.
+     *
+     * @return \Symfony\Component\HttpKernel\HttpKernelInterface
+     */
+    public function createApplication()
+    {
+        $app = require __DIR__ . '/../../src/app.php';
+        require __DIR__ . '/../../src/controllers.php';
+
+        return $app;
+    }
+
+    public function testLogger()
+    {
+        $this->assertInstanceOf('Monolog\Logger', $this->app['monolog']);
+        $this->assertInstanceOf('Monolog\Handler\ErrorLogHandler', $this->app['monolog.handler']);
+    }
+
+    public function testDeleteLogsId()
+    {
+        $model = $this->getMock('Google\Cloud\Samples\Bookshelf\DataModel\DataModelInterface');
+        $model
+            ->expects($this->once())
+            ->method('read')
+            ->will($this->returnValue(array('id' => '123', 'imageUrl' => null)));
+        $model
+            ->expects($this->once())
+            ->method('delete');
+
+        $this->app['bookshelf.model'] = $model;
+        $this->app['monolog.handler'] = new TestHandler;
+
+        $client = $this->createClient();
+        $crawler = $client->request('POST', '/books/123/delete');
+        $this->assertTrue($this->app['monolog.handler']->hasNotice('Deleted Book: 123'));
+    }
+}
