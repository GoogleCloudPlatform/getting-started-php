diff --git a/composer.json b/composer.json
index 49c14ae..b0257d9 100644
--- a/composer.json
+++ b/composer.json
@@ -9,7 +9,8 @@
     "silex/silex": "^1.3",
     "twig/twig": "^1.22",
     "mongodb/mongodb": "^1.0.0@beta",
-    "google/apiclient": "~2.0@RC"
+    "google/apiclient": "~2.0@RC",
+    "monolog/monolog": "^1.17"
   },
   "require-dev": {
     "phpunit/phpunit": "~4",
diff --git a/composer.lock b/composer.lock
index 810c836..f91f3cc 100644
--- a/composer.lock
+++ b/composer.lock
@@ -4,8 +4,8 @@
         "Read more about it at https://getcomposer.org/doc/01-basic-usage.md#composer-lock-the-lock-file",
         "This file is @generated automatically"
     ],
-    "hash": "ac0fbf1ee11f761bd1eb564f3052909f",
-    "content-hash": "5574ff7b1329b5b99658575cd2d3ccb9",
+    "hash": "0ca45dbbc114786738809ca7ec4399a7",
+    "content-hash": "25e7ee00c639096d1ae357882ccdfa8d",
     "packages": [
         {
             "name": "firebase/php-jwt",
diff --git a/src/app.php b/src/app.php
index e85551d..a401f62 100644
--- a/src/app.php
+++ b/src/app.php
@@ -49,6 +49,12 @@ $app['user'] = function ($app) {
 };
 // [END create_user]
 
+// add logging to stderr
+// [START logging]
+$app->register(new Silex\Provider\MonologServiceProvider());
+$app['monolog.handler'] = new Monolog\Handler\ErrorLogHandler();
+// [END logging]
+
 // create the google authorization client
 $app['google_client'] = function ($app) {
   /** @var Symfony\Component\Routing\Generator\UrlGenerator $urlGen */
diff --git a/src/controllers.php b/src/controllers.php
index fda9e02..a8c2fef 100644
--- a/src/controllers.php
+++ b/src/controllers.php
@@ -159,6 +159,11 @@ $app->post('/books/{id}/delete', function ($id) use ($app) {
             $storage->deleteFile($book['imageUrl']);
         }
         // [END delete_image]
+
+        // [START logging]
+        $app['monolog']->notice('Deleted Book: ' . $book['id']);
+        // [END logging]
+
         return $app->redirect('/books/', Response::HTTP_SEE_OTHER);
     }
 
diff --git a/test/functional/LoggerTest.php b/test/functional/LoggerTest.php
new file mode 100644
index 0000000..70733d2
--- /dev/null
+++ b/test/functional/LoggerTest.php
@@ -0,0 +1,65 @@
+<?php
+/*
+ * Copyright 2015 Google Inc. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+namespace Google\Cloud\Samples\Bookshelf;
+
+use Silex\WebTestCase;
+use Monolog\Handler\TestHandler;
+
+/**
+ * Class ControllersTest.
+ */
+class LoggerTest extends WebTestCase
+{
+    /**
+     * Creates the application.
+     *
+     * @return \Symfony\Component\HttpKernel\HttpKernelInterface
+     */
+    public function createApplication()
+    {
+        $app = require __DIR__ . '/../../src/app.php';
+        require __DIR__ . '/../../src/controllers.php';
+
+        return $app;
+    }
+
+    public function testLogger()
+    {
+        $this->assertInstanceOf('Monolog\Logger', $this->app['monolog']);
+        $this->assertInstanceOf('Monolog\Handler\ErrorLogHandler', $this->app['monolog.handler']);
+    }
+
+    public function testDeleteLogsId()
+    {
+        $model = $this->getMock('Google\Cloud\Samples\Bookshelf\DataModel\DataModelInterface');
+        $model
+            ->expects($this->once())
+            ->method('read')
+            ->will($this->returnValue(array('id' => '123', 'imageUrl' => null)));
+        $model
+            ->expects($this->once())
+            ->method('delete');
+
+        $this->app['bookshelf.model'] = $model;
+        $this->app['monolog.handler'] = new TestHandler;
+
+        $client = $this->createClient();
+        $crawler = $client->request('POST', '/books/123/delete');
+        $this->assertTrue($this->app['monolog.handler']->hasNotice('Deleted Book: 123'));
+    }
+}
