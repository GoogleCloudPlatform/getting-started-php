diff --git a/README.md b/README.md
index c23b619..4df4bde 100644
--- a/README.md
+++ b/README.md
@@ -1,8 +1,8 @@
-# 2 - Structured data
+# 3 - Cloud Storage
 
-This folder contains the sample code for the [Structured data][step-2]
+This folder contains the sample code for the [Cloud Storage][step-3]
 tutorial. Please refer to the tutorial for instructions on configuring, running,
 and deploying this sample.
 
-[step-2]: https://cloud.google.com/php/getting-started/using-structured-data
+[step-3]: https://cloud.google.com/php/getting-started/using-cloud-storage
 
diff --git a/src/FileSystem/CloudStorage.php b/src/FileSystem/CloudStorage.php
new file mode 100644
index 0000000..4349e9f
--- /dev/null
+++ b/src/FileSystem/CloudStorage.php
@@ -0,0 +1,74 @@
+<?php
+
+/*
+ * Copyright 2015 Google Inc. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+namespace Google\Cloud\Samples\Bookshelf\FileSystem;
+
+use Google\Cloud\Storage\StorageClient;
+
+/**
+ * class CloudStorage stores images in Google Cloud Storage.
+ */
+class CloudStorage
+{
+    private $bucket;
+
+    /**
+     * CloudStorage constructor.
+     *
+     * @param string         $projectId The Google Cloud project id
+     * @param string         $bucketName The cloud storage bucket name
+     */
+    public function __construct($projectId, $bucketName)
+    {
+        $storage = new StorageClient([
+            'projectId' => $projectId,
+        ]);
+        $this->bucket = $storage->bucket($bucketName);
+    }
+
+    /**
+     * Uploads a file to storage and returns the url of the new file.
+     *
+     * @param $localFilePath string
+     * @param $contentType string
+     *
+     * @return string A URL pointing to the stored file.
+     */
+    public function storeFile($localFilePath, $contentType)
+    {
+        $f = fopen($localFilePath, 'r');
+        $object = $this->bucket->upload($f, [
+            'metadata' => ['contentType' => $contentType],
+            'predefinedAcl' => 'publicRead',
+        ]);
+        return $object->info()['mediaLink'];
+    }
+
+    /**
+     * Deletes a file.
+     *
+     * @param string $url A URL returned by a call to StorageFile.
+     */
+    public function deleteFile($url)
+    {
+        $path_components = explode('/', parse_url($url, PHP_URL_PATH));
+        $name = $path_components[count($path_components) - 1];
+        $object = $this->bucket->object($name);
+        $object->delete();
+    }
+}
diff --git a/src/app.php b/src/app.php
index 11f75c0..594c4af 100644
--- a/src/app.php
+++ b/src/app.php
@@ -23,6 +23,7 @@
 use Google\Cloud\Samples\Bookshelf\DataModel\Sql;
 use Google\Cloud\Samples\Bookshelf\DataModel\Datastore;
 use Google\Cloud\Samples\Bookshelf\DataModel\MongoDb;
+use Google\Cloud\Samples\Bookshelf\FileSystem\CloudStorage;
 use Silex\Application;
 use Silex\Provider\TwigServiceProvider;
 use Symfony\Component\Yaml\Yaml;
@@ -43,6 +44,15 @@ $config = getenv('BOOKSHELF_CONFIG') ?:
 
 $app['config'] = Yaml::parse(file_get_contents($config));
 
+// Cloud Storage
+$app['bookshelf.storage'] = function ($app) {
+    /** @var array $config */
+    $config = $app['config'];
+    $projectId = $config['google_project_id'];
+    $bucketName = $projectId . '.appspot.com';
+    return new CloudStorage($projectId, $bucketName);
+};
+
 // determine the datamodel backend using the app configuration
 $app['bookshelf.model'] = function ($app) {
     /** @var array $config */
diff --git a/src/controllers.php b/src/controllers.php
index fc15adc..2a04c16 100644
--- a/src/controllers.php
+++ b/src/controllers.php
@@ -24,6 +24,7 @@ namespace Google\Cloud\Samples\Bookshelf;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
 use Google\Cloud\Samples\Bookshelf\DataModel\DataModelInterface;
+use Google\Cloud\Samples\Bookshelf\FileSystem\CloudStorage;
 
 $app->get('/', function (Request $request) use ($app) {
     return $app->redirect('/books/');
@@ -59,7 +60,17 @@ $app->get('/books/add', function () use ($app) {
 $app->post('/books/add', function (Request $request) use ($app) {
     /** @var DataModelInterface $model */
     $model = $app['bookshelf.model'];
+    /** @var CloudStorage $storage */
+    $storage = $app['bookshelf.storage'];
+    $files = $request->files;
     $book = $request->request->all();
+    $image = $files->get('image');
+    if ($image && $image->isValid()) {
+        $book['image_url'] = $storage->storeFile(
+            $image->getRealPath(),
+            $image->getMimeType()
+        );
+    }
     $id = $model->create($book);
 
     return $app->redirect("/books/$id");
@@ -101,11 +112,23 @@ $app->get('/books/{id}/edit', function ($id) use ($app) {
 $app->post('/books/{id}/edit', function (Request $request, $id) use ($app) {
     $book = $request->request->all();
     $book['id'] = $id;
+    /** @var CloudStorage $storage */
+    $storage = $app['bookshelf.storage'];
     /** @var DataModelInterface $model */
     $model = $app['bookshelf.model'];
     if (!$model->read($id)) {
         return new Response('', Response::HTTP_NOT_FOUND);
     }
+    // [START add_image]
+    $files = $request->files;
+    $image = $files->get('image');
+    if ($image && $image->isValid()) {
+        $book['image_url'] = $storage->storeFile(
+            $image->getRealPath(),
+            $image->getMimeType()
+        );
+    }
+    // [END add_image]
     if ($model->update($book)) {
         return $app->redirect("/books/$id");
     }
@@ -121,7 +144,13 @@ $app->post('/books/{id}/delete', function ($id) use ($app) {
     $book = $model->read($id);
     if ($book) {
         $model->delete($id);
-
+        // [START delete_image]
+        if (!empty($book['image_url'])) {
+            /** @var CloudStorage $storage */
+            $storage = $app['bookshelf.storage'];
+            $storage->deleteFile($book['image_url']);
+        }
+        // [END delete_image]
         return $app->redirect('/books/', Response::HTTP_SEE_OTHER);
     }
 
diff --git a/templates/form.html.twig b/templates/form.html.twig
index eec21d6..dc4e3c7 100644
--- a/templates/form.html.twig
+++ b/templates/form.html.twig
@@ -42,6 +42,18 @@
     <textarea name="description" id="description" class="form-control">{{book.description}}</textarea>
   </div>
 
+  {# [START book_form_image] #}
+  <div class="form-group">
+    <label for="image">Cover Image</label>
+    <input type="file" name="image" id="image" class="form-control"/>
+  </div>
+
+  <div class="form-group hidden">
+    <label for="image_url">Cover Image URL</label>
+    <input type="text" name="image_url" id="image_url" value="{{book.image_url}}" class="form-control"/>
+  </div>
+  {# [END book_form_image] #}
+
   <button id="submit" type="submit" class="btn btn-success">Save</button>
 </form>
 
diff --git a/templates/list.html.twig b/templates/list.html.twig
index af00157..4f7f0e9 100644
--- a/templates/list.html.twig
+++ b/templates/list.html.twig
@@ -28,9 +28,15 @@
 {% for book in books %}
 <div class="media">
   <a href="/books/{{book.id}}">
+    {# [START book_image] #}
     <div class="media-left">
-      <img src="http://placekitten.com/g/128/192">
+      {% if book.image_url %}
+        <img src="{{book.image_url}}">
+      {% else %}
+        <img src="http://placekitten.com/g/128/192">
+      {% endif %}
     </div>
+    {# [END book_image] #}
     <div class="media-body">
       <h4>{{book.title}}</h4>
       <p>{{book.author}}</p>
diff --git a/templates/view.html.twig b/templates/view.html.twig
index 459ce61..9693bca 100644
--- a/templates/view.html.twig
+++ b/templates/view.html.twig
@@ -34,6 +34,12 @@
 
 {# [START book_details] #}
 <div class="media">
+  {# [START book_image] #}
+  <div class="media-left">
+    <img class="book-image"
+         src="{{ book.image_url ?: 'http://placekitten.com/g/128/192' }}">
+  </div>
+  {# [END book_image] #}
   <div class="media-body">
     <h4 class="book-title">
       {{book.title}}
diff --git a/test/functional/ControllersTest.php b/test/functional/ControllersTest.php
index 4efd086..3b15077 100644
--- a/test/functional/ControllersTest.php
+++ b/test/functional/ControllersTest.php
@@ -20,6 +20,7 @@ namespace Google\Cloud\Samples\Bookshelf;
 use Google\Cloud\Samples\Bookshelf\FileSystem\FakeFileStorage;
 use Monolog\Handler\TestHandler;
 use Silex\WebTestCase;
+use Symfony\Component\HttpFoundation\File\UploadedFile;
 
 /**
  * Test for application controllers
@@ -74,11 +75,22 @@ class ControllersTest extends WebTestCase
         $submitButton = $crawler->selectButton('submit');
         $form = $submitButton->form();
 
+        $photo = new UploadedFile(
+            __DIR__ . '/../lib/CatHat.jpg',
+            'CatHat.jpg',
+            'image/jpg',
+            filesize(__DIR__ . '/../lib/CatHat.jpg')
+        );
         $crawler = $client->submit($form, array(
             'title' => 'The Cat in the Hat',
             'author' => 'Dr. Suess',
             'published_date' => '1957-01-01',
+            'image' => $photo,
         ));
+        $this->assertEquals(
+            'img1',
+            $crawler->filter('.book-image')->attr('src')
+        );
 
         // Capture the delete button.
         $deleteCatHat = $crawler->selectButton('submit');
@@ -133,10 +145,17 @@ class ControllersTest extends WebTestCase
         $submitButton = $crawler->selectButton('submit');
         $form = $submitButton->form();
 
+        $photo = new UploadedFile(
+            __DIR__ . '/../lib/CatHat.jpg',
+            'CatHat.jpg',
+            'image/jpg',
+            filesize(__DIR__ . '/../lib/CatHat.jpg')
+        );
         $crawler = $client->submit($form, array(
             'title' => 'Where the Red Fern Grows',
             'author' => 'Will Rawls',
             'published_date' => '1961',
+            'image' => $photo,
         ));
 
         // Make sure the page contents match what we just submitted.
@@ -157,6 +176,7 @@ class ControllersTest extends WebTestCase
             'title' => 'Where the Red Fern Grows',
             'author' => 'Wilson Rawls',
             'published_date' => '1961',
+            'image' => $photo,
         ));
 
         // Make sure the page contents match what we just submitted.
diff --git a/test/unit/FileSystem/CloudStorageTest.php b/test/unit/FileSystem/CloudStorageTest.php
new file mode 100644
index 0000000..0318779
--- /dev/null
+++ b/test/unit/FileSystem/CloudStorageTest.php
@@ -0,0 +1,43 @@
+<?php
+/*
+ * Copyright 2015 Google Inc. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+namespace Google\Cloud\Samples\Bookshelf\FileSystem;
+
+use Google\Cloud\Samples\Bookshelf\SkipTestsIfMissingCredentialsTrait;
+use Google\Cloud\Samples\Bookshelf\GetConfigTrait;
+
+class CloudStorageTest extends \PHPUnit_Framework_TestCase
+{
+    use SkipTestsIfMissingCredentialsTrait;
+    use GetConfigTrait;
+
+    public function testOne()
+    {
+        $config = $this->getConfig();
+        $projectId = $config['google_project_id'];
+        $bucketName = $projectId . '.appspot.com';
+        $storage = new CloudStorage($projectId, $bucketName);
+        $url = $storage->storeFile(__DIR__ . '/../../lib/CatHat.jpg', 'image/jpg');
+        try {
+            $this->assertStringStartsWith(
+                "https://www.googleapis.com/download/storage/v1/b/$bucketName/o/",
+                $url
+            );
+        } finally {  // clean up
+            $storage->deleteFile($url);
+        }
+    }
+}
