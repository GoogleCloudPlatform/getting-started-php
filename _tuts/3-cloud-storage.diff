diff --git a/src/FileSystem/CloudStorage.php b/src/FileSystem/CloudStorage.php
new file mode 100644
index 0000000..451f8bc
--- /dev/null
+++ b/src/FileSystem/CloudStorage.php
@@ -0,0 +1,81 @@
+<?php
+
+/*
+ * Copyright 2015 Google Inc. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+namespace Google\Cloud\Samples\Bookshelf\FileSystem;
+
+/**
+ * class CloudStorage stores images in Google Cloud Storage.
+ */
+class CloudStorage
+{
+    /**
+     * CloudStorage constructor.
+     *
+     * @param string         $bucketName The cloud storage bucket name
+     * @param \Google_Client $client     When null, a new Google_client is created
+     *                                   that uses default application credentials.
+     */
+    public function __construct($bucketName, \Google_Client $client = null)
+    {
+        if (!$client) {
+            $client = new \Google_Client();
+            $client->useApplicationDefaultCredentials();
+            $client->setApplicationName('php bookshelf');
+            $client->setScopes(\Google_Service_Storage::DEVSTORAGE_READ_WRITE);
+        }
+        $this->service = new \Google_Service_Storage($client);
+        $this->bucketName = $bucketName;
+    }
+
+    /**
+     * Uploads a file to storage and returns the url of the new file.
+     *
+     * @param $localFilePath string
+     * @param $contentType string
+     *
+     * @return string A URL pointing to the stored file.
+     */
+    public function storeFile($localFilePath, $contentType)
+    {
+        $obj = new \Google_Service_Storage_StorageObject();
+        // Generate a unique file name so we don't try to write to files to
+        // the same name.
+        $name = uniqid('', true);
+        $obj->setName($name);
+        $obj = $this->service->objects->insert($this->bucketName, $obj, array(
+            'data' => file_get_contents($localFilePath),
+            'uploadType' => 'media',
+            'name' => $name,
+            'predefinedAcl' => 'publicread',
+        ));
+
+        return $obj->getMediaLink();
+    }
+
+    /**
+     * Deletes a file.
+     *
+     * @param string $url A URL returned by a call to StorageFile.
+     */
+    public function deleteFile($url)
+    {
+        $path_components = explode('/', parse_url($url, PHP_URL_PATH));
+        $name = $path_components[count($path_components) - 1];
+        $this->service->objects->delete($this->bucketName, $name);
+    }
+}
diff --git a/src/app.php b/src/app.php
index 833c03c..621a6d6 100644
--- a/src/app.php
+++ b/src/app.php
@@ -41,6 +41,18 @@ $config = getenv('BOOKSHELF_CONFIG') ?:
 
 $app['config'] = Yaml::parse(file_get_contents($config));
 
+// create the google authorization client
+$app['google_client'] = function ($app) {
+  /** @var Symfony\Component\Routing\Generator\UrlGenerator $urlGen */
+  $urlGen = $app['url_generator'];
+  $redirectUri = $urlGen->generate('login_callback', [], $urlGen::ABSOLUTE_URL);
+  return new Google_Client([
+    'client_id'     => $app['config']['google_client_id'],
+    'client_secret' => $app['config']['google_client_secret'],
+    'redirect_uri'  => $redirectUri,
+  ]);
+};
+
 // turn debug on by default
 $app['debug'] = !in_array(
     getenv('BOOKSHELF_DEBUG'),
diff --git a/src/controllers.php b/src/controllers.php
index f584652..55ddd21 100644
--- a/src/controllers.php
+++ b/src/controllers.php
@@ -25,6 +25,7 @@ use Symfony\Component\HttpFoundation\Cookie;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
 use Google\Cloud\Samples\Bookshelf\DataModel\DataModelInterface;
+use Google\Cloud\Samples\Bookshelf\FileSystem\CloudStorage;
 
 $app->get('/', function (Request $request) use ($app) {
     return $app->redirect('/books/');
@@ -60,7 +61,17 @@ $app->get('/books/add', function () use ($app) {
 $app->post('/books/add', function (Request $request) use ($app) {
     /** @var DataModelInterface $model */
     $model = $app['bookshelf.model'];
+    /** @var CloudStorage $storage */
+    $storage = $app['bookshelf.storage'];
+    $files = $request->files;
     $book = $request->request->all();
+    $image = $files->get('image');
+    if ($image && $image->isValid()) {
+        $book['imageUrl'] = $storage->storeFile(
+            $image->getRealPath(),
+            $image->getMimeType()
+        );
+    }
     if (!empty($book['publishedDate'])) {
         $book['publishedDate'] = date('c', strtotime($book['publishedDate']));
     }
@@ -105,8 +116,20 @@ $app->get('/books/{id}/edit', function ($id) use ($app) {
 $app->post('/books/{id}/edit', function (Request $request, $id) use ($app) {
     $book = $request->request->all();
     $book['id'] = $id;
+    /** @var CloudStorage $storage */
+    $storage = $app['bookshelf.storage'];
     /** @var DataModelInterface $model */
     $model = $app['bookshelf.model'];
+    // [START add_image]
+    $files = $request->files;
+    $image = $files->get('image');
+    if ($image && $image->isValid()) {
+        $book['imageUrl'] = $storage->storeFile(
+            $image->getRealPath(),
+            $image->getMimeType()
+        );
+    }
+    // [END add_image]
     if (!empty($book['publishedDate'])) {
         $book['publishedDate'] = date('c', strtotime($book['publishedDate']));
     }
@@ -125,7 +148,13 @@ $app->post('/books/{id}/delete', function ($id) use ($app) {
     $book = $model->read($id);
     if ($book) {
         $model->delete($id);
-
+        // [START delete_image]
+        if ($book['imageUrl']) {
+            /** @var CloudStorage $storage */
+            $storage = $app['bookshelf.storage'];
+            $storage->deleteFile($book['imageUrl']);
+        }
+        // [END delete_image]
         return $app->redirect('/books/', Response::HTTP_SEE_OTHER);
     }
 
diff --git a/templates/form.html.twig b/templates/form.html.twig
index 9679ef6..9188524 100644
--- a/templates/form.html.twig
+++ b/templates/form.html.twig
@@ -42,6 +42,18 @@
     <textarea name="description" id="description" class="form-control">{{book.description}}</textarea>
   </div>
 
+  {# [START book_form_image] #}
+  <div class="form-group">
+    <label for="image">Cover Image</label>
+    <input type="file" name="image" id="image" class="form-control"/>
+  </div>
+
+  <div class="form-group hidden">
+    <label for="imageUrl">Cover Image URL</label>
+    <input type="text" name="imageUrl" id="imageUrl" value="{{book.imageUrl}}" class="form-control"/>
+  </div>
+  {# [END book_form_image] #}
+
   <button id="submit" type="submit" class="btn btn-success">Save</button>
 </form>
 
diff --git a/templates/list.html.twig b/templates/list.html.twig
index 5643436..d1eff14 100644
--- a/templates/list.html.twig
+++ b/templates/list.html.twig
@@ -28,9 +28,15 @@
 {% for book in books %}
 <div class="media">
   <a href="/books/{{book.id}}">
+    {# [START book_image] #}
     <div class="media-left">
-      <img src="http://placekitten.com/g/128/192">
+      {% if book.imageUrl %}
+        <img src="{{book.imageUrl}}">
+      {% else %}
+        <img src="http://placekitten.com/g/128/192">
+      {% endif %}
     </div>
+    {# [END book_image] #}
     <div class="media-body">
       <h4>{{book.title}}</h4>
       <p>{{book.author}}</p>
@@ -40,7 +46,7 @@
 {% else %}
 <p>No books found</p>
 {% endfor %}
-{# [end book_list] #}
+{# [END book_list] #}
 
 {% if next_page_token %}
 <nav>
diff --git a/templates/view.html.twig b/templates/view.html.twig
index d5c839e..db27f94 100644
--- a/templates/view.html.twig
+++ b/templates/view.html.twig
@@ -34,6 +34,12 @@
 
 {# [START book_details] #}
 <div class="media">
+  {# [START book_image] #}
+  <div class="media-left">
+    <img class="book-image"
+         src="{{ book.imageUrl ?: 'http://placekitten.com/g/128/192' }}">
+  </div>
+  {# [END book_image] #}
   <div class="media-body">
     <h4 class="book-title">
       {{book.title}}
diff --git a/test/functional/ControllersTest.php b/test/functional/ControllersTest.php
index cd2e32f..a959177 100644
--- a/test/functional/ControllersTest.php
+++ b/test/functional/ControllersTest.php
@@ -81,11 +81,22 @@ class ControllersTest extends WebTestCase
         $submitButton = $crawler->selectButton('submit');
         $form = $submitButton->form();
 
+        $photo = new UploadedFile(
+            __DIR__ . '/../lib/CatHat.jpg',
+            'CatHat.jpg',
+            'image/jpg',
+            filesize(__DIR__ . '/../lib/CatHat.jpg')
+        );
         $crawler = $client->submit($form, array(
             'title' => 'The Cat in the Hat',
             'author' => 'Dr. Suess',
             'publishedDate' => '1957-01-01',
+            'image' => $photo,
         ));
+        $this->assertEquals(
+            'img1',
+            $crawler->filter('.book-image')->attr('src')
+        );
 
         // Capture the delete button.
         $deleteCatHat = $crawler->selectButton('submit');
@@ -140,10 +151,17 @@ class ControllersTest extends WebTestCase
         $submitButton = $crawler->selectButton('submit');
         $form = $submitButton->form();
 
+        $photo = new UploadedFile(
+            __DIR__ . '/../lib/CatHat.jpg',
+            'CatHat.jpg',
+            'image/jpg',
+            filesize(__DIR__ . '/../lib/CatHat.jpg')
+        );
         $crawler = $client->submit($form, array(
             'title' => 'Where the Red Fern Grows',
             'author' => 'Will Rawls',
             'publishedDate' => '1961',
+            'image' => $photo,
         ));
 
         // Make sure the page contents match what we just submitted.
@@ -164,6 +182,7 @@ class ControllersTest extends WebTestCase
             'title' => 'Where the Red Fern Grows',
             'author' => 'Wilson Rawls',
             'publishedDate' => '1961',
+            'image' => $photo,
         ));
 
         // Make sure the page contents match what we just submitted.
diff --git a/test/unit/FileSystem/CloudStorageTest.php b/test/unit/FileSystem/CloudStorageTest.php
new file mode 100644
index 0000000..4f571a9
--- /dev/null
+++ b/test/unit/FileSystem/CloudStorageTest.php
@@ -0,0 +1,42 @@
+<?php
+/*
+ * Copyright 2015 Google Inc. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+namespace Google\Cloud\Samples\Bookshelf\FileSystem;
+
+use Google\Cloud\Samples\Bookshelf\SkipTestsIfMissingCredentialsTrait;
+use Google\Cloud\Samples\Bookshelf\GetConfigTrait;
+
+class CloudStorageTest extends \PHPUnit_Framework_TestCase
+{
+    use SkipTestsIfMissingCredentialsTrait;
+    use GetConfigTrait;
+
+    public function testOne()
+    {
+        $config = $this->getConfig();
+        $bucket = $config['google_storage_bucket'];
+        $storage = new CloudStorage($bucket);
+        $url = $storage->storeFile(__DIR__ . '/../../lib/CatHat.jpg', 'image/jpg');
+        try {
+            $this->assertStringStartsWith(
+                "https://www.googleapis.com/download/storage/v1/b/$bucket/o/",
+                $url
+            );
+        } finally {  // clean up
+            $storage->deleteFile($url);
+        }
+    }
+}
diff --git a/web/index.php b/web/index.php
index 7cdeb9b..a4da94c 100644
--- a/web/index.php
+++ b/web/index.php
@@ -29,6 +29,9 @@ require __DIR__ . '/../src/controllers.php';
 /** @var array $config */
 $config = $app['config'];
 
+// Cloud Storage
+$app['bookshelf.storage'] = new CloudStorage($config['google_storage_bucket']);
+
 // Data Model
 switch ($config['bookshelf_backend']) {
     case 'mongodb':
