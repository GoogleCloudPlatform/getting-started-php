diff --git a/src/Session/GoogleAccount.php b/src/Session/GoogleAccount.php
new file mode 100644
index 0000000..8a7b591
--- /dev/null
+++ b/src/Session/GoogleAccount.php
@@ -0,0 +1,63 @@
+<?php
+
+/*
+ * Copyright 2015 Google Inc. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+namespace Google\Cloud\Samples\Bookshelf\Session;
+
+use Symfony\Component\HttpFoundation\Cookie;
+use Symfony\Component\HttpFoundation\Request;
+
+/**
+ * class SessionUser represents an authenticated user in the browser session
+ */
+// [START google_account]
+class GoogleAccount
+{
+    public $id;
+    public $name;
+    public $imageUrl;
+
+    public function __construct($id = null, $name = null, $imageUrl = null)
+    {
+        $this->id = $id;
+        $this->name = $name;
+        $this->imageUrl = $imageUrl;
+    }
+
+    public function getLoggedIn()
+    {
+        return !empty($this->id);
+    }
+
+    public static function createFromRequest(Request $request)
+    {
+        if ($userInfo = $request->cookies->get('google_user_info')) {
+            $userInfo = json_decode($userInfo, true);
+
+            return new GoogleAccount($userInfo['sub'], $userInfo['name'], $userInfo['picture']);
+        }
+
+        return new GoogleAccount;
+    }
+
+    public static function createCookie(array $userInfo)
+    {
+        return new Cookie('google_user_info', json_encode($userInfo));
+    }
+}
+// [END google_account]
+
diff --git a/src/app.php b/src/app.php
index 833c03c..1441db3 100644
--- a/src/app.php
+++ b/src/app.php
@@ -21,6 +21,7 @@
  * Follows Silex Skeleton pattern.
  */
 use Silex\Application;
+use Silex\Provider\SessionServiceProvider;
 use Silex\Provider\TwigServiceProvider;
 use Silex\Provider\UrlGeneratorServiceProvider;
 use Symfony\Component\Yaml\Yaml;
@@ -35,12 +36,42 @@ $app->register(new TwigServiceProvider(), array(
     ),
 ));
 
+// register the url generator
+$app->register(new UrlGeneratorServiceProvider);
+
 // parse configuration
 $config = getenv('BOOKSHELF_CONFIG') ?:
     __DIR__ . '/../config/' . 'settings.yml';
 
 $app['config'] = Yaml::parse(file_get_contents($config));
 
+// register the session handler
+// [START session]
+$app->register(new SessionServiceProvider);
+// fall back on PHP's "session.save_handler" for session storage
+$app['session.storage.handler'] = null;
+$app['user'] = function ($app) {
+    /** @var Symfony\Component\HttpFoundation\Session\Session $session */
+    $session = $app['session'];
+
+    return $session->has('user') ? $session->get('user') : null;
+};
+// [END session]
+
+// create the google authorization client
+// [START google_client]
+$app['google_client'] = function ($app) {
+  /** @var Symfony\Component\Routing\Generator\UrlGenerator $urlGen */
+  $urlGen = $app['url_generator'];
+  $redirectUri = $urlGen->generate('login_callback', [], $urlGen::ABSOLUTE_URL);
+  return new Google_Client([
+    'client_id'     => $app['config']['google_client_id'],
+    'client_secret' => $app['config']['google_client_secret'],
+    'redirect_uri'  => $redirectUri,
+  ]);
+};
+// [END google_client]
+
 // turn debug on by default
 $app['debug'] = !in_array(
     getenv('BOOKSHELF_DEBUG'),
diff --git a/src/controllers.php b/src/controllers.php
index 70b7307..76c7c3c 100644
--- a/src/controllers.php
+++ b/src/controllers.php
@@ -21,7 +21,6 @@ namespace Google\Cloud\Samples\Bookshelf;
 /*
  * Adds all the controllers to $app.  Follows Silex Skeleton pattern.
  */
-use Symfony\Component\HttpFoundation\Cookie;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
 use Google\Cloud\Samples\Bookshelf\DataModel\DataModelInterface;
@@ -75,6 +74,10 @@ $app->post('/books/add', function (Request $request) use ($app) {
     if (!empty($book['publishedDate'])) {
         $book['publishedDate'] = date('c', strtotime($book['publishedDate']));
     }
+    if ($app['user']) {
+        $book['createdBy'] = $app['user']['name'];
+        $book['createdById'] = $app['user']['id'];
+    }
     $id = $model->create($book);
 
     return $app->redirect("/books/$id");
@@ -162,3 +165,58 @@ $app->post('/books/{id}/delete', function ($id) use ($app) {
 });
 // [END delete]
 
+# [START login]
+$app->get('/login', function () use ($app) {
+    /** @var Google_Client $client */
+    $client = $app['google_client'];
+
+    $scopes = [ \Google_Service_Oauth2::USERINFO_PROFILE ];
+    $authUrl = $client->createAuthUrl($scopes);
+
+    return $app->redirect($authUrl);
+})->bind('login');
+# [END login]
+
+# [START login_callback]
+$app->get('/login/callback', function () use ($app) {
+    /** @var Request $request */
+    $request = $app['request'];
+
+    if (!$code = $request->query->get('code')) {
+        return new Response('Code required', Response::HTTP_BAD_REQUEST);
+    }
+
+    /** @var Google_Client $client */
+    $client = $app['google_client'];
+    $authResponse = $client->fetchAccessTokenWithAuthCode($code);
+
+    if ($client->getAccessToken()) {
+        $userInfo = $client->verifyIdToken();
+
+        /** @var Symfony\Component\HttpFoundation\Session\Session $session */
+        $session = $app['session'];
+        $session->set('user', [
+            'id'      => $userInfo['sub'],
+            'name'    => $userInfo['name'],
+            'picture' => $userInfo['picture'],
+        ]);
+
+        return new Response('', Response::HTTP_FOUND, ['Location' => '/']);
+    }
+
+    // an error occured while trying to authorize - display it
+    return new Response($authResponse['error_description'], 400);
+
+})->bind('login_callback');
+# [END login_callback]
+
+# [START logout]
+$app->get('/logout', function () use ($app) {
+    /** @var Symfony\Component\HttpFoundation\Session\Session $session */
+    $session = $app['session'];
+    $session->remove('user');
+
+    return new Response('', Response::HTTP_FOUND, ['Location' => '/']);
+})->bind('logout');
+# [END logout]
+
diff --git a/templates/base.html.twig b/templates/base.html.twig
index db1be8f..e73f8bb 100644
--- a/templates/base.html.twig
+++ b/templates/base.html.twig
@@ -30,6 +30,22 @@
         <ul class="nav navbar-nav">
           <li><a href="/books">Books</a></li>
         </ul>
+        <p class="navbar-text navbar-right">
+          {# [START login] #}
+          {% if app.user %}
+            {% if app.user.picture %}
+              <img src="{{ app.user.picture }}" class="img-circle" width="24" alt="Photo" />
+            {% endif %}
+            <span>
+              {{ app.user.name }} &nbsp;
+              <a href="/logout">(logout)</a>
+            </span>
+          {% else %}
+            <a href="/login">Login</a>
+          {% endif %}
+          {# [END login] #}
+        </p>
+
       </div>
     </div>
     <div class="container">
diff --git a/test/functional/ControllersTest.php b/test/functional/ControllersTest.php
index a959177..582a085 100644
--- a/test/functional/ControllersTest.php
+++ b/test/functional/ControllersTest.php
@@ -53,6 +53,7 @@ class ControllersTest extends WebTestCase
         $app['bookshelf.page_size'] = 1;
         $app['bookshelf.storage'] = new FakeFileStorage();
         $app['monolog.handler'] = new TestHandler();
+        $app['session.test'] = true;
 
         return $app;
     }
@@ -210,4 +211,127 @@ class ControllersTest extends WebTestCase
         $client->submit($submitButton->form());
         $this->assertEquals(404, $client->getResponse()->getStatusCode());
     }
+
+    public function testAddBookWhenLoggedIn()
+    {
+        $client = $this->createClient();
+
+        // set the logged-in user info on the request
+        $userInfo = [
+            'id'      => 'fake-id',
+            'name'    => 'Tester Joe',
+            'picture' => null
+        ];
+
+        $this->app['session']->set('user', $userInfo);
+        $crawler = $client->request('GET', '/books/');
+
+        $editLink = $crawler
+            ->filter('a:contains("Add")') // find all links with the text "Add"
+            ->link();
+
+        // and click it
+        $crawler = $client->click($editLink);
+
+        // Fill the form and submit it.
+        $submitButton = $crawler->selectButton('submit');
+        $form = $submitButton->form();
+
+        $crawler = $client->submit($form, array(
+            'title' => 'GÃ¶del, Escher, Bach',
+            'author' => 'Douglas Hofstadter',
+            'publishedDate' => '1979',
+        ));
+
+        // get the created book ID and read it
+        $url = $client->getResponse()->headers->get('location');
+        $id = str_replace('/books/', '', $url);
+        $book = $this->app['bookshelf.model']->read($id);
+        $this->assertNotEquals(false, $book);
+        $this->assertArrayHasKey('createdBy', $book);
+        $this->assertEquals($userInfo['name'], $book['createdBy']);
+        $this->assertArrayHasKey('createdById', $book);
+        $this->assertEquals($userInfo['id'], $book['createdById']);
+    }
+
+    public function testLogin()
+    {
+        $client = $this->createClient();
+        $crawler = $client->request('GET', '/books/');
+        $loginLink = $crawler->filter('a:contains("Login")')->link();
+
+        $crawler = $client->click($loginLink);
+        $response = $client->getResponse();
+        $this->assertEquals(302, $response->getStatusCode());
+        $url = $response->headers->get('Location');
+        $this->assertNotNull($url);
+
+        $parts = parse_url($url);
+        parse_str($parts['query'], $query);
+
+        $this->assertArrayHasKey('response_type', $query);
+        $this->assertArrayHasKey('client_id', $query);
+        $this->assertArrayHasKey('redirect_uri', $query);
+        $this->assertArrayHasKey('state', $query);
+        $this->assertArrayHasKey('scope', $query);
+
+        $this->assertEquals('code', $query['response_type']);
+        $this->assertEquals('http://localhost/login/callback', $query['redirect_uri']);
+    }
+
+    public function testLoginCallback()
+    {
+        $client = $this->createClient();
+        $crawler = $client->request('GET', '/login/callback');
+
+        $response = $client->getResponse();
+        $this->assertEquals(400, $response->getStatusCode());
+        $this->assertEquals('Code required', (string) $response->getContent());
+
+        $crawler = $client->request('GET', '/login/callback?code=123');
+
+        $response = $client->getResponse();
+        $this->assertEquals(400, $response->getStatusCode());
+
+        $idToken = [
+            'sub' => 'fake-id',
+            'name' => 'Fake Name',
+            'picture' => null
+        ];
+        $googleClient = $this->getMock('Google_Client');
+        $googleClient->expects($this->once())
+            ->method('fetchAccessTokenWithAuthCode')
+            ->will($this->returnValue(true));
+        $googleClient->expects($this->once())
+            ->method('getAccessToken')
+            ->will($this->returnValue(['access_token' => 'xyz']));
+        $googleClient->expects($this->once())
+            ->method('verifyIdToken')
+            ->will($this->returnValue($idToken));
+
+        $this->app['google_client'] = $googleClient;
+        $crawler = $client->request('GET', '/login/callback?code=123');
+
+        $userInfo = $this->app['session']->get('user');
+
+        $this->assertNotNull($userInfo);
+        $this->assertArrayHasKey('id', $userInfo);
+        $this->assertEquals($idToken['sub'], $userInfo['id']);
+    }
+
+    public function testLogout()
+    {
+        $client = $this->createClient();
+
+        // set the logged-in user info on the request
+        $userInfo = [
+            'id' => 'fake-id',
+        ];
+        $this->app['session']->set('user', $userInfo);
+
+        // make the request
+        $crawler = $client->request('GET', '/logout');
+
+        $this->assertNull($this->app['session']->get('user'));
+    }
 }
diff --git a/test/unit/Session/GoogleAccountTest.php b/test/unit/Session/GoogleAccountTest.php
new file mode 100644
index 0000000..2150d76
--- /dev/null
+++ b/test/unit/Session/GoogleAccountTest.php
@@ -0,0 +1,70 @@
+<?php
+/*
+ * Copyright 2015 Google Inc. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+namespace Google\Cloud\Samples\Bookshelf\Session;
+
+use Symfony\Component\HttpFoundation\Request;
+
+class GoogleAccountTest extends \PHPUnit_Framework_TestCase
+{
+    public function testLoggedIn()
+    {
+        $id = 'fake-id';
+        $user = new GoogleAccount($id);
+
+        $this->assertTrue($user->getLoggedIn());
+        $this->assertNull($user->name);
+        $this->assertNull($user->imageUrl);
+    }
+
+    public function testNotLoggedIn()
+    {
+        $user = new GoogleAccount();
+
+        $this->assertFalse($user->getLoggedIn());
+        $this->assertNull($user->name);
+        $this->assertNull($user->imageUrl);
+    }
+
+    public function testCreateFromRequest()
+    {
+        $userInfo = [
+            'sub'       => 'fake-id',
+            'name'      => 'Test Guy',
+            'picture'   => 'http://fa.ke/image.jpg',
+        ];
+
+        $request = new Request();
+        $request->cookies->set('google_user_info', json_encode($userInfo));
+
+        $user = GoogleAccount::createFromRequest($request);
+
+        $this->assertTrue($user->getLoggedIn());
+        $this->assertEquals($userInfo['sub'], $user->id);
+        $this->assertEquals($userInfo['name'], $user->name);
+        $this->assertEquals($userInfo['picture'], $user->imageUrl);
+    }
+
+    public function testCreateFromRequestWithoutCookie()
+    {
+        $request = new Request();
+        $user = GoogleAccount::createFromRequest($request);
+
+        $this->assertFalse($user->getLoggedIn());
+        $this->assertNull($user->name);
+        $this->assertNull($user->imageUrl);
+    }
+}
