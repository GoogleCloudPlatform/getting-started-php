diff --git a/README.md b/README.md
index 4df4bde..ea0038e 100644
--- a/README.md
+++ b/README.md
@@ -1,8 +1,8 @@
-# 3 - Cloud Storage
+# 4 - Authenticating users
 
-This folder contains the sample code for the [Cloud Storage][step-3]
+This folder contains the sample code for the [Authenticating users][step-4]
 tutorial. Please refer to the tutorial for instructions on configuring, running,
 and deploying this sample.
 
-[step-3]: https://cloud.google.com/php/getting-started/using-cloud-storage
+[step-4]: https://cloud.google.com/php/getting-started/authenticate-users
 
diff --git a/composer.json b/composer.json
index ee374f2..db732fa 100644
--- a/composer.json
+++ b/composer.json
@@ -6,6 +6,7 @@
   },
   "require": {
     "php": "5.6.*|7.0.*|7.1.*",
+    "google/apiclient": "^2.0",
     "google/cloud": "^0.21",
     "silex/silex": "^1.3",
     "symfony/yaml": "^3.0",
diff --git a/composer.lock b/composer.lock
index 23be1d7..b3e9f5c 100644
--- a/composer.lock
+++ b/composer.lock
@@ -4,8 +4,8 @@
         "Read more about it at https://getcomposer.org/doc/01-basic-usage.md#composer-lock-the-lock-file",
         "This file is @generated automatically"
     ],
-    "hash": "3a6407bf0a78a6757301bd36e525a575",
-    "content-hash": "2ed03aef435a286fbf9ff49ce423fec4",
+    "hash": "c1f5215a807df9528325cc009cb81527",
+    "content-hash": "747a138f1e78e6571c19d5d7f2db97be",
     "packages": [
         {
             "name": "firebase/php-jwt",
@@ -51,6 +51,99 @@
             "time": "2016-07-18 04:51:16"
         },
         {
+            "name": "google/apiclient",
+            "version": "v2.1.2",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/google/google-api-php-client.git",
+                "reference": "360e656f48c3262a6f7fefc0207521efa66caedf"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/google/google-api-php-client/zipball/360e656f48c3262a6f7fefc0207521efa66caedf",
+                "reference": "360e656f48c3262a6f7fefc0207521efa66caedf",
+                "shasum": ""
+            },
+            "require": {
+                "firebase/php-jwt": "~2.0|~3.0|~4.0",
+                "google/apiclient-services": "^0.9",
+                "google/auth": "^0.11",
+                "guzzlehttp/guzzle": "~5.2|~6.0",
+                "guzzlehttp/psr7": "^1.2",
+                "monolog/monolog": "^1.17",
+                "php": ">=5.4",
+                "phpseclib/phpseclib": "~0.3.10|~2.0"
+            },
+            "require-dev": {
+                "cache/filesystem-adapter": "^0.3.2",
+                "phpunit/phpunit": "~4",
+                "squizlabs/php_codesniffer": "~2.3",
+                "symfony/css-selector": "~2.1",
+                "symfony/dom-crawler": "~2.1"
+            },
+            "suggest": {
+                "cache/filesystem-adapter": "For caching certs and tokens (using Google_Client::setCache)"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "2.x-dev"
+                }
+            },
+            "autoload": {
+                "psr-0": {
+                    "Google_": "src/"
+                },
+                "classmap": [
+                    "src/Google/Service/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "Apache-2.0"
+            ],
+            "description": "Client library for Google APIs",
+            "homepage": "http://developers.google.com/api-client-library/php",
+            "keywords": [
+                "google"
+            ],
+            "time": "2017-01-11 19:44:46"
+        },
+        {
+            "name": "google/apiclient-services",
+            "version": "v0.9",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/google/google-api-php-client-services.git",
+                "reference": "c400c655d1b7ca412ad4dd344e569c6865e74a83"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/google/google-api-php-client-services/zipball/c400c655d1b7ca412ad4dd344e569c6865e74a83",
+                "reference": "c400c655d1b7ca412ad4dd344e569c6865e74a83",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.4"
+            },
+            "type": "library",
+            "autoload": {
+                "psr-0": {
+                    "Google_Service_": "src"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "Apache-2.0"
+            ],
+            "description": "Client library for Google APIs",
+            "homepage": "http://developers.google.com/api-client-library/php",
+            "keywords": [
+                "google"
+            ],
+            "time": "2017-01-11 18:53:21"
+        },
+        {
             "name": "google/auth",
             "version": "v0.11.1",
             "source": {
@@ -442,6 +535,98 @@
             "time": "2016-11-26 00:15:39"
         },
         {
+            "name": "phpseclib/phpseclib",
+            "version": "2.0.4",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/phpseclib/phpseclib.git",
+                "reference": "ab8028c93c03cc8d9c824efa75dc94f1db2369bf"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/phpseclib/phpseclib/zipball/ab8028c93c03cc8d9c824efa75dc94f1db2369bf",
+                "reference": "ab8028c93c03cc8d9c824efa75dc94f1db2369bf",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.3"
+            },
+            "require-dev": {
+                "phing/phing": "~2.7",
+                "phpunit/phpunit": "~4.0",
+                "sami/sami": "~2.0",
+                "squizlabs/php_codesniffer": "~2.0"
+            },
+            "suggest": {
+                "ext-gmp": "Install the GMP (GNU Multiple Precision) extension in order to speed up arbitrary precision integer arithmetic operations.",
+                "ext-libsodium": "SSH2/SFTP can make use of some algorithms provided by the libsodium-php extension.",
+                "ext-mcrypt": "Install the Mcrypt extension in order to speed up a few other cryptographic operations.",
+                "ext-openssl": "Install the OpenSSL extension in order to speed up a wide variety of cryptographic operations."
+            },
+            "type": "library",
+            "autoload": {
+                "files": [
+                    "phpseclib/bootstrap.php"
+                ],
+                "psr-4": {
+                    "phpseclib\\": "phpseclib/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Jim Wigginton",
+                    "email": "terrafrost@php.net",
+                    "role": "Lead Developer"
+                },
+                {
+                    "name": "Patrick Monnerat",
+                    "email": "pm@datasphere.ch",
+                    "role": "Developer"
+                },
+                {
+                    "name": "Andreas Fischer",
+                    "email": "bantu@phpbb.com",
+                    "role": "Developer"
+                },
+                {
+                    "name": "Hans-JÃ¼rgen Petrich",
+                    "email": "petrich@tronic-media.com",
+                    "role": "Developer"
+                },
+                {
+                    "name": "Graham Campbell",
+                    "email": "graham@alt-three.com",
+                    "role": "Developer"
+                }
+            ],
+            "description": "PHP Secure Communications Library - Pure-PHP implementations of RSA, AES, SSH2, SFTP, X.509 etc.",
+            "homepage": "http://phpseclib.sourceforge.net",
+            "keywords": [
+                "BigInteger",
+                "aes",
+                "asn.1",
+                "asn1",
+                "blowfish",
+                "crypto",
+                "cryptography",
+                "encryption",
+                "rsa",
+                "security",
+                "sftp",
+                "signature",
+                "signing",
+                "ssh",
+                "twofish",
+                "x.509",
+                "x509"
+            ],
+            "time": "2016-10-04 00:57:04"
+        },
+        {
             "name": "pimple/pimple",
             "version": "v1.1.1",
             "source": {
diff --git a/src/app.php b/src/app.php
index 6b0bed7..523bab7 100644
--- a/src/app.php
+++ b/src/app.php
@@ -26,7 +26,9 @@ use Google\Cloud\Samples\Bookshelf\DataModel\Datastore;
 use Google\Cloud\Samples\Bookshelf\DataModel\MongoDb;
 use Google\Cloud\Samples\Bookshelf\FileSystem\CloudStorage;
 use Silex\Application;
+use Silex\Provider\SessionServiceProvider;
 use Silex\Provider\TwigServiceProvider;
+use Silex\Provider\UrlGeneratorServiceProvider;
 use Symfony\Component\Yaml\Yaml;
 
 $app = new Application();
@@ -39,12 +41,42 @@ $app->register(new TwigServiceProvider(), array(
     ),
 ));
 
+// register the url generator
+$app->register(new UrlGeneratorServiceProvider);
+
 // parse configuration
 $config = getenv('BOOKSHELF_CONFIG') ?:
     __DIR__ . '/../config/' . 'settings.yml';
 
 $app['config'] = Yaml::parse(file_get_contents($config));
 
+// register the session handler
+// [START session]
+$app->register(new SessionServiceProvider);
+// fall back on PHP's "session.save_handler" for session storage
+$app['session.storage.handler'] = null;
+$app['user'] = function ($app) {
+    /** @var Symfony\Component\HttpFoundation\Session\Session $session */
+    $session = $app['session'];
+
+    return $session->has('user') ? $session->get('user') : null;
+};
+// [END session]
+
+// create the google authorization client
+// [START google_client]
+$app['google_client'] = function ($app) {
+    /** @var Symfony\Component\Routing\Generator\UrlGenerator $urlGen */
+    $urlGen = $app['url_generator'];
+    $redirectUri = $urlGen->generate('login_callback', [], $urlGen::ABSOLUTE_URL);
+    return new Google_Client([
+        'client_id'     => $app['config']['google_client_id'],
+        'client_secret' => $app['config']['google_client_secret'],
+        'redirect_uri'  => $redirectUri,
+    ]);
+};
+// [END google_client]
+
 // Cloud Storage
 $app['bookshelf.storage'] = function ($app) {
     /** @var array $config */
diff --git a/src/controllers.php b/src/controllers.php
index f4c531c..7447edc 100644
--- a/src/controllers.php
+++ b/src/controllers.php
@@ -76,6 +76,10 @@ $app->post('/books/add', function (Request $request) use ($app) {
         $book['publishedDate'] = $d->setTimezone(
             new \DateTimeZone('UTC'))->format("Y-m-d\TH:i:s\Z");
     }
+    if ($app['user']) {
+        $book['createdBy'] = $app['user']['name'];
+        $book['createdById'] = $app['user']['id'];
+    }
     $id = $model->create($book);
 
     return $app->redirect("/books/$id");
@@ -167,3 +171,57 @@ $app->post('/books/{id}/delete', function ($id) use ($app) {
     return new Response('', Response::HTTP_NOT_FOUND);
 });
 // [END delete]
+
+# [START login]
+$app->get('/login', function () use ($app) {
+    /** @var Google_Client $client */
+    $client = $app['google_client'];
+
+    $scopes = [ \Google_Service_Oauth2::USERINFO_PROFILE ];
+    $authUrl = $client->createAuthUrl($scopes);
+
+    return $app->redirect($authUrl);
+})->bind('login');
+# [END login]
+
+# [START login_callback]
+$app->get('/login/callback', function () use ($app) {
+    /** @var Request $request */
+    $request = $app['request'];
+
+    if (!$code = $request->query->get('code')) {
+        return new Response('Code required', Response::HTTP_BAD_REQUEST);
+    }
+
+    /** @var Google_Client $client */
+    $client = $app['google_client'];
+    $authResponse = $client->fetchAccessTokenWithAuthCode($code);
+
+    if ($client->getAccessToken()) {
+        $userInfo = $client->verifyIdToken();
+
+        /** @var Symfony\Component\HttpFoundation\Session\Session $session */
+        $session = $app['session'];
+        $session->set('user', [
+            'id'      => $userInfo['sub'],
+            'name'    => $userInfo['name'],
+            'picture' => $userInfo['picture'],
+        ]);
+
+        return new Response('', Response::HTTP_FOUND, ['Location' => '/']);
+    }
+
+    // an error occured while trying to authorize - display it
+    return new Response($authResponse['error_description'], 400);
+})->bind('login_callback');
+# [END login_callback]
+
+# [START logout]
+$app->get('/logout', function () use ($app) {
+    /** @var Symfony\Component\HttpFoundation\Session\Session $session */
+    $session = $app['session'];
+    $session->remove('user');
+
+    return new Response('', Response::HTTP_FOUND, ['Location' => '/']);
+})->bind('logout');
+# [END logout]
diff --git a/templates/base.html.twig b/templates/base.html.twig
index db1be8f..e73f8bb 100644
--- a/templates/base.html.twig
+++ b/templates/base.html.twig
@@ -30,6 +30,22 @@
         <ul class="nav navbar-nav">
           <li><a href="/books">Books</a></li>
         </ul>
+        <p class="navbar-text navbar-right">
+          {# [START login] #}
+          {% if app.user %}
+            {% if app.user.picture %}
+              <img src="{{ app.user.picture }}" class="img-circle" width="24" alt="Photo" />
+            {% endif %}
+            <span>
+              {{ app.user.name }} &nbsp;
+              <a href="/logout">(logout)</a>
+            </span>
+          {% else %}
+            <a href="/login">Login</a>
+          {% endif %}
+          {# [END login] #}
+        </p>
+
       </div>
     </div>
     <div class="container">
diff --git a/test/functional/ControllersTest.php b/test/functional/ControllersTest.php
index 73fb38e..6da85e7 100644
--- a/test/functional/ControllersTest.php
+++ b/test/functional/ControllersTest.php
@@ -47,6 +47,7 @@ class ControllersTest extends WebTestCase
         $app['bookshelf.page_size'] = 1;
         $app['bookshelf.storage'] = new FakeFileStorage();
         $app['monolog.handler'] = new TestHandler();
+        $app['session.test'] = true;
 
         return $app;
     }
@@ -204,4 +205,131 @@ class ControllersTest extends WebTestCase
         $client->submit($submitButton->form());
         $this->assertEquals(404, $client->getResponse()->getStatusCode());
     }
+
+    public function testAddBookWhenLoggedIn()
+    {
+        $client = $this->createClient();
+
+        // set the logged-in user info on the request
+        $userInfo = [
+            'id'      => 'fake-id',
+            'name'    => 'Tester Joe',
+            'picture' => null
+        ];
+
+        $this->app['session']->set('user', $userInfo);
+        $crawler = $client->request('GET', '/books/');
+
+        $editLink = $crawler
+            ->filter('a:contains("Add")') // find all links with the text "Add"
+            ->link();
+
+        // and click it
+        $crawler = $client->click($editLink);
+
+        // Fill the form and submit it.
+        $submitButton = $crawler->selectButton('submit');
+        $form = $submitButton->form();
+
+        $crawler = $client->submit($form, array(
+            'title' => 'GÃ¶del, Escher, Bach',
+            'author' => 'Douglas Hofstadter',
+            'publishedDate' => '1979',
+        ));
+
+        // get the created book ID and read it
+        $url = $client->getResponse()->headers->get('location');
+        $id = str_replace('/books/', '', $url);
+        $book = $this->app['bookshelf.model']->read($id);
+        $this->assertNotEquals(false, $book);
+        $this->assertArrayHasKey('createdBy', $book);
+        $this->assertEquals($userInfo['name'], $book['createdBy']);
+        $this->assertArrayHasKey('createdById', $book);
+        $this->assertEquals($userInfo['id'], $book['createdById']);
+        // clean up
+        $this->app['bookshelf.model']->delete($id);
+        $book = $this->app['bookshelf.model']->read($id);
+        $this->assertEquals(false, $book);
+    }
+
+    public function testLogin()
+    {
+        $client = $this->createClient();
+        $crawler = $client->request('GET', '/books/');
+        $loginLink = $crawler->filter('a:contains("Login")')->link();
+
+        $crawler = $client->click($loginLink);
+        $response = $client->getResponse();
+        $this->assertEquals(302, $response->getStatusCode());
+        $url = $response->headers->get('Location');
+        $this->assertNotNull($url);
+
+        $parts = parse_url($url);
+        parse_str($parts['query'], $query);
+
+        $this->assertArrayHasKey('response_type', $query);
+        $this->assertArrayHasKey('client_id', $query);
+        $this->assertArrayHasKey('redirect_uri', $query);
+        $this->assertArrayHasKey('state', $query);
+        $this->assertArrayHasKey('scope', $query);
+
+        $this->assertEquals('code', $query['response_type']);
+        $this->assertEquals('http://localhost/login/callback', $query['redirect_uri']);
+    }
+
+    public function testLoginCallback()
+    {
+        $client = $this->createClient();
+        $crawler = $client->request('GET', '/login/callback');
+
+        $response = $client->getResponse();
+        $this->assertEquals(400, $response->getStatusCode());
+        $this->assertEquals('Code required', (string) $response->getContent());
+
+        $crawler = $client->request('GET', '/login/callback?code=123');
+
+        $response = $client->getResponse();
+        $this->assertEquals(400, $response->getStatusCode());
+
+        $idToken = [
+            'sub' => 'fake-id',
+            'name' => 'Fake Name',
+            'picture' => null
+        ];
+        $googleClient = $this->getMock('Google_Client');
+        $googleClient->expects($this->once())
+            ->method('fetchAccessTokenWithAuthCode')
+            ->will($this->returnValue(true));
+        $googleClient->expects($this->once())
+            ->method('getAccessToken')
+            ->will($this->returnValue(['access_token' => 'xyz']));
+        $googleClient->expects($this->once())
+            ->method('verifyIdToken')
+            ->will($this->returnValue($idToken));
+
+        $this->app['google_client'] = $googleClient;
+        $crawler = $client->request('GET', '/login/callback?code=123');
+
+        $userInfo = $this->app['session']->get('user');
+
+        $this->assertNotNull($userInfo);
+        $this->assertArrayHasKey('id', $userInfo);
+        $this->assertEquals($idToken['sub'], $userInfo['id']);
+    }
+
+    public function testLogout()
+    {
+        $client = $this->createClient();
+
+        // set the logged-in user info on the request
+        $userInfo = [
+            'id' => 'fake-id',
+        ];
+        $this->app['session']->set('user', $userInfo);
+
+        // make the request
+        $crawler = $client->request('GET', '/logout');
+
+        $this->assertNull($this->app['session']->get('user'));
+    }
 }
