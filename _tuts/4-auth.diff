diff --git a/src/User/SimpleUser.php b/src/User/SimpleUser.php
new file mode 100644
index 0000000..20d0cf3
--- /dev/null
+++ b/src/User/SimpleUser.php
@@ -0,0 +1,54 @@
+<?php
+
+/*
+ * Copyright 2015 Google Inc. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+namespace Google\Cloud\Samples\Bookshelf\User;
+
+use Symfony\Component\HttpFoundation\Request;
+
+/**
+ * class SimepleUser controlls the user in the session
+ */
+class SimpleUser
+{
+    public $id;
+    public $name;
+    public $imageUrl;
+
+    public function __construct($id = null, $name = null, $imageUrl = null)
+    {
+        $this->id = $id;
+        $this->name = $name;
+        $this->imageUrl = $imageUrl;
+    }
+
+    public function getLoggedIn()
+    {
+        return !empty($this->id);
+    }
+
+    public static function createFromRequest(Request $request)
+    {
+        if ($userInfo = $request->cookies->get('google_user_info')) {
+            $userInfo = json_decode($userInfo, true);
+
+            return new SimpleUser($userInfo['sub'], $userInfo['name'], $userInfo['picture']);
+        }
+
+        return new SimpleUser;
+    }
+}
diff --git a/src/app.php b/src/app.php
index cf1c569..1de13f3 100644
--- a/src/app.php
+++ b/src/app.php
@@ -24,6 +24,7 @@ use Silex\Application;
 use Silex\Provider\TwigServiceProvider;
 use Silex\Provider\UrlGeneratorServiceProvider;
 use Symfony\Component\Yaml\Yaml;
+use Google\Cloud\Samples\Bookshelf\User\SimpleUser;
 
 $app = new Application();
 
@@ -35,9 +36,17 @@ $app->register(new TwigServiceProvider(), array(
     ),
 ));
 
+// register the url generator
+$app->register(new UrlGeneratorServiceProvider);
+
 // parse configuration
 $app['config'] = Yaml::parse(file_get_contents(__DIR__ . '/../config/settings.yml'));
 
+// create the user object
+$app['user'] = function ($app) {
+  return SimpleUser::createFromRequest($app['request']);
+};
+
 // create the google authorization client
 $app['google_client'] = function ($app) {
   /** @var Symfony\Component\Routing\Generator\UrlGenerator $urlGen */
diff --git a/src/controllers.php b/src/controllers.php
index 2c57d7b..22a92a1 100644
--- a/src/controllers.php
+++ b/src/controllers.php
@@ -75,6 +75,10 @@ $app->post('/books/add', function (Request $request) use ($app) {
     if (!empty($book['publishedDate'])) {
         $book['publishedDate'] = date('c', strtotime($book['publishedDate']));
     }
+    if ($app['user']->getLoggedIn()) {
+        $book['createdBy'] = $app['user']->name;
+        $book['createdById'] = $app['user']->id;
+    }
     $id = $model->create($book);
 
     return $app->redirect("/books/$id");
@@ -162,3 +166,48 @@ $app->post('/books/{id}/delete', function ($id) use ($app) {
     }
 );
 // [END delete]
+
+$app->get('/login', function () use ($app) {
+    /** @var Google_Client $client */
+    $client = $app['google_client'];
+
+    $scopes = [ \Google_Service_Oauth2::USERINFO_PROFILE ];
+    $authUrl = $client->createAuthUrl($scopes);
+
+    return $app->redirect($authUrl);
+})->bind('login');
+
+$app->get('/login/callback', function () use ($app) {
+    /** @var Request $request */
+    $request = $app['request'];
+
+    if (!$code = $request->query->get('code')) {
+        return new Response('Code required', Response::HTTP_BAD_REQUEST);
+    }
+
+    /** @var Google_Client $client */
+    $client = $app['google_client'];
+    $authResponse = $client->fetchAccessTokenWithAuthCode($code);
+
+    if ($client->getAccessToken()) {
+        $userInfo = $client->verifyIdToken();
+
+        // set the user info in a cookie and redirect to the homepage
+        $cookie = new Cookie('google_user_info', json_encode($userInfo));
+        $response = new Response('', Response::HTTP_FOUND, ['Location' => '/']);
+        $response->headers->setCookie($cookie);
+
+        return $response;
+    }
+
+    // an error occured while trying to authorize - display it
+    return new Response($authResponse['error_description'], 400);
+
+})->bind('login_callback');
+
+$app->get('/logout', function () use ($app) {
+    $response = new Response('', Response::HTTP_FOUND, ['Location' => '/']);
+    $response->headers->clearCookie('google_user_info');
+
+    return $response;
+})->bind('logout');
diff --git a/templates/base.html.twig b/templates/base.html.twig
index db1be8f..b6a8cb4 100644
--- a/templates/base.html.twig
+++ b/templates/base.html.twig
@@ -30,6 +30,19 @@
         <ul class="nav navbar-nav">
           <li><a href="/books">Books</a></li>
         </ul>
+        <p class="navbar-text navbar-right">
+          {% if app.user.loggedIn %}
+            {% if app.user.imageUrl %}
+              <img src="{{ app.user.imageUrl }}" class="img-circle" width="24" alt="Photo" />
+            {% endif %}
+            <span>
+              {{ app.user.name }} &nbsp;
+              <a href="/logout">(logout)</a>
+            </span>
+          {% else %}
+            <a href="/login">Login</a>
+          {% endif %}
+        </p>
       </div>
     </div>
     <div class="container">
diff --git a/test/functional/ControllersTest.php b/test/functional/ControllersTest.php
index a959177..0fb184b 100644
--- a/test/functional/ControllersTest.php
+++ b/test/functional/ControllersTest.php
@@ -210,4 +210,86 @@ class ControllersTest extends WebTestCase
         $client->submit($submitButton->form());
         $this->assertEquals(404, $client->getResponse()->getStatusCode());
     }
+
+    public function testLogin()
+    {
+        $client = $this->createClient();
+        $crawler = $client->request('GET', '/books/');
+        $loginLink = $crawler->filter('a:contains("Login")')->link();
+
+        $crawler = $client->click($loginLink);
+        $response = $client->getResponse();
+        $this->assertEquals(302, $response->getStatusCode());
+        $url = $response->headers->get('Location');
+        $this->assertNotNull($url);
+
+        $parts = parse_url($url);
+        parse_str($parts['query'], $query);
+
+        $this->assertArrayHasKey('response_type', $query);
+        $this->assertArrayHasKey('client_id', $query);
+        $this->assertArrayHasKey('redirect_uri', $query);
+        $this->assertArrayHasKey('state', $query);
+        $this->assertArrayHasKey('scope', $query);
+
+        $this->assertEquals('code', $query['response_type']);
+        $this->assertEquals('http://localhost/login/callback', $query['redirect_uri']);
+    }
+
+    public function testLoginCallback()
+    {
+        $client = $this->createClient();
+        $crawler = $client->request('GET', '/login/callback');
+
+        $response = $client->getResponse();
+        $this->assertEquals(400, $response->getStatusCode());
+        $this->assertEquals('Code required', (string) $response->getContent());
+
+        $crawler = $client->request('GET', '/login/callback?code=123');
+
+        $response = $client->getResponse();
+        $this->assertEquals(400, $response->getStatusCode());
+
+        $idToken = ['sub' => 'fake-id'];
+        $googleClient = $this->getMock('Google_Client');
+        $googleClient->expects($this->once())
+            ->method('fetchAccessTokenWithAuthCode')
+            ->will($this->returnValue(true));
+        $googleClient->expects($this->once())
+            ->method('getAccessToken')
+            ->will($this->returnValue(['access_token' => 'xyz']));
+        $googleClient->expects($this->once())
+            ->method('verifyIdToken')
+            ->will($this->returnValue($idToken));
+
+        $this->app['google_client'] = $googleClient;
+        $crawler = $client->request('GET', '/login/callback?code=123');
+        $response = $client->getResponse();
+        $cookies = $response->headers->getCookies();
+
+        $this->assertEquals(1, count($cookies));
+        $this->assertEquals('google_user_info', $cookies[0]->getName());
+        $this->assertEquals(json_encode($idToken), $cookies[0]->getValue());
+    }
+
+    public function testLogout()
+    {
+        $client = $this->createClient();
+
+        // set the logged-in user info on the request
+        $userInfo = [
+            'sub' => 'fake-id',
+        ];
+        $cookie = new Cookie('google_user_info', json_encode($userInfo));
+        $client->getCookieJar()->set($cookie);
+
+        // make the request
+        $crawler = $client->request('GET', '/logout');
+        $response = $client->getResponse();
+        $cookies = $response->headers->getCookies();
+
+        $this->assertEquals(1, count($cookies));
+        $this->assertEquals('google_user_info', $cookies[0]->getName());
+        $this->assertNull($cookies[0]->getValue());
+    }
 }
diff --git a/test/unit/User/SimpleUserTest.php b/test/unit/User/SimpleUserTest.php
new file mode 100644
index 0000000..d9ef01e
--- /dev/null
+++ b/test/unit/User/SimpleUserTest.php
@@ -0,0 +1,70 @@
+<?php
+/*
+ * Copyright 2015 Google Inc. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+namespace Google\Cloud\Samples\Bookshelf\User;
+
+use Symfony\Component\HttpFoundation\Request;
+
+class SimpleUserTest extends \PHPUnit_Framework_TestCase
+{
+    public function testLoggedIn()
+    {
+        $id = 'fake-id';
+        $user = new SimpleUser($id);
+
+        $this->assertTrue($user->getLoggedIn());
+        $this->assertNull($user->name);
+        $this->assertNull($user->imageUrl);
+    }
+
+    public function testNotLoggedIn()
+    {
+        $user = new SimpleUser();
+
+        $this->assertFalse($user->getLoggedIn());
+        $this->assertNull($user->name);
+        $this->assertNull($user->imageUrl);
+    }
+
+    public function testCreateFromRequest()
+    {
+        $userInfo = [
+            'sub'       => 'fake-id',
+            'name'      => 'Test Guy',
+            'picture'   => 'http://fa.ke/image.jpg',
+        ];
+
+        $request = new Request();
+        $request->cookies->set('google_user_info', json_encode($userInfo));
+
+        $user = SimpleUser::createFromRequest($request);
+
+        $this->assertTrue($user->getLoggedIn());
+        $this->assertEquals($userInfo['sub'], $user->id);
+        $this->assertEquals($userInfo['name'], $user->name);
+        $this->assertEquals($userInfo['picture'], $user->imageUrl);
+    }
+
+    public function testCreateFromRequestWithoutCookie()
+    {
+        $request = new Request();
+        $user = SimpleUser::createFromRequest($request);
+
+        $this->assertFalse($user->getLoggedIn());
+        $this->assertNull($user->name);
+        $this->assertNull($user->imageUrl);
+    }
+}
